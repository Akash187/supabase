openref: 0.1

info:
  id: reference/supabase-py
  title: Supabase Client
  description: |

    Supabase Python(Community).

  definition: ../../spec/enrichments/tsdoc_v2/combined.json
  specUrl: https://github.com/supabase/supabase/edit/master/spec/supabase_py_v2.yml
  slugPrefix: '/'
  libraries:
    - name: 'Python'
      id: 'py'
      version: '0.0.1'

pages:
  Initializing:
    $ref: '@supabase/supabase-js.index.SupabaseClient.constructor'
    description: |
      You can initialize a new Supabase client using the `create_client()` method.

      The Supabase client is your entrypoint to the rest of the Supabase functionality
      and is the easiest way to interact with everything we offer within the Supabase ecosystem.

    examples:
      - name: create_client()
        code: |
          ```python3
          import os
          from supabase import create_client, Client

          url: str = os.environ.get("SUPABASE_URL")
          key: str = os.environ.get("SUPABASE_KEY")
          supabase: Client = create_client(url, key)
          ```
      - name: With timeout option
        code: |
          ```python3
          import os
          from supabase import create_client, Client

          url: str = os.environ.get("SUPABASE_URL")
          key: str = os.environ.get("SUPABASE_KEY")
          supabase: Client = create_client(url, key, options={'timeout': 10})
          ```

  auth.signUp():
    title: 'sign_up()'
    $ref: '@supabase/gotrue-js.GoTrueClient.signUp'
    notes: |
      - By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://app.supabase.com/project/_/auth/settings).
      - **Confirm email** determines if users need to confirm their email address after signing up.
        - If **Confirm email** is enabled, a `user` is returned but `session` is null.
        - If **Confirm email** is disabled, both a `user` and a `session` are returned.
      - When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/reference/auth/config#site_url) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://app.supabase.com/project/_/auth/settings).
      - If signUp() is called for an existing confirmed user:
          - If **Confirm email** is enabled in [your project](https://app.supabase.com/project/_/auth/settings), an obfuscated/fake user object is returned.
          - If **Confirm email** is disabled, the error message, `User already registered` is returned.
      - To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser).
    examples:
      - name: Sign up.
        code: |
          ```python3
          {} = supabase.auth.signUp({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
      - name: Sign up with additional user metadata.
        code: |
          ```python3

          ```
  auth.sign_out():
    title: 'sign_out()'
    $ref: '@supabase/gotrue-js.GoTrueClient.signOut'
    notes: |
      - In order to use the `signOut()` method, the user needs to be signed in first.
    examples:
      - name: Sign out
        code: |
          ```python3
          res = supabase.auth.sign_out()
          ```
  auth.verify_otp():
    title: 'verify_otp()'
    $ref: '@supabase/gotrue-js.GoTrueClient.verifyOtp'
    notes: |
      - The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite` or `email_change`.
      - The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.
    examples:
      - name: Verify Sms One-Time Password (OTP)
        isSpotlight: true
        code: |
          ```js
          const { data, error } = await supabase.auth.verifyOtp({ phone, token, type: 'sms'})
          ```
      - name: Verify Signup One-Time Password (OTP)
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.verifyOtp({ email, token, type: 'signup'})
          ```
  auth.get_session_from_url():
    title: 'get_session_from_url'
    $ref: '@supabase/gotrue-js.GoTrueClient.getSession'
    examples:
      - name: Get the session data from URL
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.getSession()
          ```

  auth.set_session():
    title: 'set_session()'
    $ref: '@supabase/gotrue-js.GoTrueClient.setSession'
    notes: |
      - `setSession()` takes in a refresh token and uses it to get a new session.
      - The refresh token can only be used once to obtain a new session.
      - [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.
      - You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.
      - If you are using React Native, you will need to install a Buffer polyfill via a library such as [rn-nodeify](https://github.com/tradle/rn-nodeify) to properly use the library.
    examples:
      - name: Refresh the session
        description: Sets the session data from refresh_token and returns current session or an error if the refresh_token is invalid.
        isSpotlight: true
        js: |
          ```js
            const { data, error } = supabase.auth.setSession(refresh_token)
          ```
  auth.refresh_session():
    title: 'refreshSession()'
    $ref: '@supabase/gotrue-js.GoTrueClient.refreshSession'
    notes: |
      - This method will refresh the session whether the current one is expired or not.
      - Both examples destructure `user` and `session` from `data`. This is not required; so `const { data, error } =` is also valid.
    examples:
      - name: Refresh session using the current session
        isSpotlight: true
        js: |
          ```js
          const { data: { user, session }, error } = await supabase.auth.refreshSession()
          ```
      - name: Refresh session using a passed-in session
        isSpotlight: true
        js: |
          ```js
          const { data: { user, session }, error } = await supabase.auth.refreshSession({ refresh_token })
          ```
  auth.onAuthStateChange():
    title: 'onAuthStateChange()'
    $ref: '@supabase/gotrue-js.GoTrueClient.onAuthStateChange'
    notes: |
      - Types of auth events: `SIGNED_IN`, `SIGNED_OUT`, `TOKEN_REFRESHED`, `USER_UPDATED`, `USER_DELETED`, `PASSWORD_RECOVERY`
      - This isn't functional at the moment as `realtime-py` hasn't been implemented. Please check back again or reach out if you'd like to implement the client library.

  Supabase Auth Admin Api:
    title: 'Overview'
    notes: |
      - Any method under the `supabase.auth.admin` namespace requires a `service_role` key.
      - These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.

  auth.admin.getUserById():
    title: 'getUserById()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.getUserById'
    notes: |
      - Fetches the user object from the database based on the user's id.
      - The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.
    examples:
      - name: Fetch the user object using the access_token jwt.
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.getUserById(1)
          ```
auth.admin.get_user():
    title: 'get_user()'
    $ref: '@supabase/gotrue-js.GoTrueClient.getUser'
    notes: |
      - This method gets the user object from the current session.
      - Fetches the user object from the database instead of local session.
    examples:
      - name: Get the logged in user with the current existing session
        isSpotlight: true
        js: |
          ```js
          const { data: { user } } = await supabase.auth.getUser()
          ```
      - name: Get the logged in user with a custom access token jwt.
        isSpotlight: false
        js: |
          ```js
          const { data: { user } } = await supabase.auth.getUser(jwt)
          ```
  auth.admin.update_user():
    title: 'update_user()'
    $ref: '@supabase/gotrue-js.GoTrueClient.updateUser'
    notes: |
      - In order to use the `update_user()` method, the user needs to be signed in first.
      - By Default, email updates sends a confirmation link to both the user's current and new email.
      To only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://app.supabase.com/project/_/auth/settings).
    examples:
      - name: Update the email for an authenticated user
        description: Sends a "Confirm Email Change" email to the new email address.
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.updateUser({email: 'new@email.com'})
          ```
      - name: Update the password for an authenticated user
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.updateUser({password: 'new password'})
          ```
      - name: Update the user's metadata
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.updateUser({
            data: { hello: 'world' }
          })
          ```
  auth.admin.listUsers():
    title: 'listUsers()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.listUsers'
    examples:
      - name: Get a full list of users.
        isSpotlight: true
        js: |
          ```js
          const { data: { users }, error } = await supabase.auth.admin.listUsers()
          ```
  auth.admin.createUser():
    title: 'createUser()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.createUser'
    notes: |
      - To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.
    examples:
      - name: Create a new user with custom user metadata
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.createUser({
            email: 'user@email.com',
            password: 'password',
            user_metadata: { name: 'Yoda' }
          })
          ```
      - name: Auto-confirm the user's email
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.createUser({
            email: 'user@email.com',
            email_confirm: true
          })
          ```
      - name: Auto-confirm the user's phone number
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.createUser({
            phone: '1234567890',
            phone_confirm: true
          })
          ```
  auth.admin.delete_user():
    title: 'delete_user()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.deleteUser'
    notes: |
      - The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.
    examples:
      - name: Removes a user
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.deleteUser(
            '715ed5db-f090-4b8c-a067-640ecee36aa0'
          )
          ```

  auth.admin.invite_user_by_email():
    title: 'inviteUserByEmail()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.inviteUserByEmail'
    notes: |
      - Sends an invite link to the user's email address.
    examples:
      - name: Invite a user
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.inviteUserByEmail('email@example.com')
          ```

  auth.reset_password_for_email():
    title: 'resetPasswordForEmail()'
    $ref: '@supabase/gotrue-js.GoTrueClient.resetPasswordForEmail'
    notes: |
      Sends a password reset request to an email address.
      When the user clicks the reset link in the email they are redirected back to your application.
      Prompt the user for a new password and call `auth.updateUser()`:
      ```js
      const { data, error } = await supabase.auth
        .updateUser({ password: new_password })
      ```
    examples:
      - name: Reset password
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
            redirectTo: 'https://example.com/update-password',
          })
          ```

  auth.admin.generateLink():
    title: 'generateLink()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.generateLink'
    examples:
      - name: Generate a signup link
        isSpotlight: true
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'signup',
            email: 'email@example.com',
            options: {
              'password': 'secret'
            }
          })
          ```
      - name: Generate an invite link
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'invite',
            email: 'email@example.com'
          })
          ```
      - name: Generate a magic link
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'magiclink',
            email: 'email@example.com'
          })
          ```
      - name: Generate a recovery link
        isSpotlight: false
        js: |
          ```js
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'recovery',
            email: 'email@example.com'
          })
          ```
      - name: Generate links to change current email address
        isSpotlight: false
        js: |
          ```js
          // generate an email change link to be sent to the current email address
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'email_change_current',
            email: 'current.email@example.com',
            newEmail: 'new.email@example.com'
          })

          // generate an email change link to be sent to the new email address
          const { data, error } = await supabase.auth.admin.generateLink({
            type: 'email_change_new',
            email: 'current.email@example.com',
            newEmail: 'new.email@example.com'
          })
          ```

  auth.admin.updateUserById():
    title: 'updateUserById()'
    $ref: '@supabase/gotrue-js.GoTrueAdminApi.updateUserById'
    examples:
      - name: Updates a user's email.
        isSpotlight: false
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { email: 'new@email.com' }
          )
          ```
      - name: Updates a user's password.
        isSpotlight: false
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { password: 'new_password' }
          )
          ```
      - name: Updates a user's metadata.
        isSpotlight: true
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { user_metadata: { hello: 'world' } }
          )
          ```
      - name: Updates a user's app_metadata.
        isSpotlight: false
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { app_metadata: { plan: 'trial' } }
          )
          ```
      - name: Confirms a user's email address.
        isSpotlight: false
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { email_confirm: true }
          )
          ```
      - name: Confirms a user's phone number.
        isSpotlight: false
        js: |
          ```js
          const { data: user, error } = await supabase.auth.admin.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { phone_confirm: true }
          )
          ```

  invoke():
    title: 'invoke()'
    description: |
      Invoke a Supabase Function.
    $ref: '@supabase/functions-js.FunctionsClient.invoke'
    notes: |
      - Requires an Authorization header.
      - When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.
    examples:
      - name: Basic invocation.
        description:
        code: |
          ```python3
          func = supabase.functions()
          @asyncio.coroutine
          async def test_func(loop):
            resp = await func.invoke("hello-world",invoke_options={'body':{}})
            return resp

          loop = asyncio.get_event_loop()
          resp = loop.run_until_complete(test_func(loop))
          loop.close()
          ```


  storage.list_buckets():
    title: 'list_buckets()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.listBuckets'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: List buckets
        code: |
          ```python3
          res = supabase.storage().list_buckets()
          ```

  storage.get_bucket():
    title: 'get_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.getBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Get bucket
        isSpotlight: true
        code: |
          ```python3
          res = supabase.storage().get_bucket(name)
          ```

  storage.create_bucket():
    title: 'create_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.createBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `insert`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Create bucket
        code: |
          ```python3
          res = supabase.storage().create_bucket(name)
          ```

  storage.empty_bucket():
    title: 'empty_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.emptyBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: `select` and `delete`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Empty bucket
        code: |
          ```python3
          res = supabase.storage().empty_bucket(name)
          ```
  storage.delete_bucket():
    title: 'delete_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.deleteBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select` and `delete`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Delete bucket
        code: |
          ```python3
          res = supabase.storage().delete_bucket(name)
          ```

  storage.from_.upload():
    title: 'from_.upload()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.upload'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `insert`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Upload file using filepath
        code: |
          ```python3
          with open(source, 'rb+') as f:
            res = supabase.storage().from_('bucket').upload(destination, os.path.abspath(source))
          ```
  storage.from_.move():
    title: 'from_.move()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.move'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `update` and `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Move file
        code: |
          ```py
          res = supabase.storage().from_(bucket).move('public/avatar1.png', 'private/avatar2.png')
          ```

  storage.from_.create_signed_url():
    title: 'from_.create_signed_url()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.createSignedUrl'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Create Signed URL
        code: |
          ```python3
          res = supabase.storage().from_(bucket_name).create_signed_url(filepath, expiry_duration)
          ```

  storage.from_.get_public_url():
    title: 'from_.get_public_url()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.getPublicUrl'
    notes: |
      - The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [app.supabase.com](https://app.supabase.com), clicking the overflow menu on a bucket and choosing "Make public"
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Returns the URL for an asset in a public bucket
        code: |
          ```python3
          res = supabase.storage().from_(bucket_name).get_public_url('test/avatar1.jpg')
          ```

  storage.from_.download():
    title: 'from_.download()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.download'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Download file
        code: |
          ```python3
          with open(destination, 'wb+') as f:
            res = supabase.storage().from_(bucket_name).download(source)
            f.write(res)
          ```

  storage.from_.remove():
    title: 'from_.remove()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.remove'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `delete` and `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: Delete file
        code: |
          ```python3
          res = supabase.storage().from_('test').remove('test.jpg')
          ```

  storage.from_.list():
    title: 'from_.list()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.list'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - name: List files in a bucket
        isSpotlight: true
        code: |
          ```python3
          res = supabase.storage().from_('test').list()
          ```
